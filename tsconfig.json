{
  "compilerOptions": {
    "outDir": "./dist/",
    // Подсвечивает все места где не указан тип
    // Однако это не означает, что теперь вовсе нельзя использовать any.
    // Это означает лишь, что в подобных ситуация разработчик должен явно писать any,
    "noImplicitAny": true,
    "module": "ESNext",
    // В какую спецификацию компилируем: для поддержки большинства браузеров
    "target": "es6",
    "jsx": "react-jsx",
    // Компилятор будет обрабатывать не только TS файлы, но и JS файлы
    "allowJs": true,
    "moduleResolution": "node",
    // Для абсолютного импорта
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/frontend/*"],
      "*": ["./src/*"],
    },
    "strict": true,
    "strictBindCallApply": true,
    // esModuleInterop позволяет работать с пакетами, которые используют
    // common js как с обычными пакета с помощью import (require() module.export) = common js
    // import Moment from 'moment';
    // без флага esModuleInterop результат undefined
    // console.log(Moment);
    // c флагом результат [object Object]
    // console.log(Moment);
    "esModuleInterop": true,
    // Если какая-либо библиотека не имеет default import,
    // лоадеры вроде ts-loader или babel-loader автоматически создают их
    // вместо такого импорта
    // import * as React from 'react';
    // можно писать такой
    // import React from 'react';
   "allowSyntheticDefaultImports": true,
   "experimentalDecorators": true,
   "emitDecoratorMetadata": true,
   "plugins": [
      {
        "name": "typescript-plugin-css-modules",
        "options": {
          "additionalData": "@import \"@/app/styles/globals-for-preprocessor.scss\";",
        },
      }
   ],
  },
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS",
    }
  },
  "include": [
    "./config/jest/setupTests.ts",
    "./src/**/*.tsx",
    "./src/**/*.ts"
  ]
  
}
